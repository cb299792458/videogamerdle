{"version":3,"sources":["components/Board/Board.js","components/Home/Home.js","components/TopBar/TopBar.js","components/Page/Page.js","App.js","reportWebVitals.js","index.js"],"names":["Board","props","_useState","useState","_useState2","_slicedToArray","swaps","setSwaps","answers","grid","origin","styles","Array","fill","map","highlights","r","c","palette","selectOrigin","e","preventDefault","JSON","parse","target","id","selectDestination","destination","orig","dest","_ref","_step","_iterator","_createForOfIteratorHelper","s","n","done","color","value","count","includes","finished","almost","err","f","check","swap","React","createElement","Fragment","line","key","_","className","concat","onPointerDown","onPointerUp","onTouchMove","Home","TopBar","FontAwesomeIcon","icon","_faBarsStaggered","_faCircleQuestion","style","_faHouse","_faChartSimple","allPuzzles","1","red","blue","pink","green","purple","2","3","4","5","makeGrid","titles","shuffle","res","puzzle","_i2","_Object$keys","Object","keys","length","Page","puzzleId","useParams","Set","_i","_Object$values","values","group","i","add","testGrid","from","parseGrid","App","Routes","Route","path","element","exact","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","BrowserRouter"],"mappings":"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","file":"static/js/main.0ee8af20.chunk.js","sourcesContent":["import './Board.css';\nimport React from 'react';\nimport {useState} from 'react';\n\nfunction Board(props){\n    // console.log('Rendering')\n    const [swaps, setSwaps] = useState(0)\n\n    const answers = props.answers\n    const grid=props.grid;\n    \n    let origin = null;\n    \n    const styles = new Array(4).fill().map(()=>new Array(4).fill(null));\n    const highlights = new Array(4).fill().map(()=>new Array(4).fill(false));\n    for(let r=0;r<4;r++){\n        for(let c=0;c<4;c++){\n            styles[r][c] = useState('')\n            highlights[r][c]=useState(false)\n        }\n    }\n    const palette = ['red','blue','pink','green','purple','orange']\n    \n    function selectOrigin(e){\n        e.preventDefault();\n        origin = JSON.parse('['+e.target.id+']')\n    }\n    \n    function selectDestination(e){\n        e.preventDefault();\n        const destination = JSON.parse('['+e.target.id+']')\n        swap(origin,destination);\n    }\n    \n    function swap(orig,dest){\n        if(!orig || (orig[0]===dest[0] && orig[1]===dest[1])){\n            \n        } else {\n            [grid[orig[0]][orig[1]],grid[dest[0]][dest[1]]] = [grid[dest[0]][dest[1]],grid[orig[0]][orig[1]]];\n            \n            check(grid);\n            setSwaps(swaps+1)\n        }\n        origin=null;\n    }\n    \n    function check(grid){\n        let almost = 0;\n        let finished = 0;\n        \n        // reset colors\n        for(let r=0;r<4;r++){\n            for(let c=0;c<4;c++){\n                styles[r][c][1]('')\n                highlights[r][c][1](false)\n            }\n        }\n        \n        for(let color of palette){\n            // horizontal\n            for(let r=0;r<4;r++){\n                let count=0;\n                for(let c=0;c<4;c++){\n                    if(!(color in answers)) continue;\n                    if(answers[color].includes(grid[r][c])) count++;\n                }\n                if(count===4){\n                    for(let c=0;c<4;c++) styles[r][c][1](color)\n                    finished++;\n                }\n                if(count===3){\n                    for(let c=0;c<4;c++){\n                        if(answers[color].includes(grid[r][c])) highlights[r][c][1](true)\n                    }\n                    almost++;\n                }\n            }\n            \n            // vertical\n            for(let c=0;c<4;c++){\n                let count=0;\n                for(let r=0;r<4;r++){\n                    if(!(color in answers)) continue;\n                    if(answers[color].includes(grid[r][c])) count++;\n                }\n                if(count===4){\n                    for(let r=0;r<4;r++){ \n                        styles[r][c][1](color)\n                    }\n                    finished++;\n                }\n                if(count===3){\n                    for(let r=0;r<4;r++){\n                        if(answers[color].includes(grid[r][c])) highlights[r][c][1](true)\n                    }\n                    almost++;\n                }\n            }\n        }\n\n        return {almost: almost, finished: finished}\n    }\n    \n    // check(grid);\n    return(\n        <>\n            <div id='board'>\n                {grid.map( (line,r) => {\n                    return <div id='row' key={r}>\n                        {line.map( (_,c) => {\n                            return <div className={`tile ${styles[r][c][0]} ${highlights[r][c][0] ? 'highlight' : ''}`} key={c} id={[r,c]}\n                            // style={styles[r][c][0]} \n                            onPointerDown={selectOrigin} onPointerUp={selectDestination} onTouchMove={(e)=>e.preventDefault()}>\n                                {grid[r][c]}\n                            </div>\n                        })}\n                    </div>\n                })}\n            </div>\n        </>\n    )\n};\n\n\nexport default Board;","import React from \"react\";\r\n\r\nfunction Home(){\r\n    return(\r\n        <>\r\n            <p>This is the Home Page</p>\r\n        </>\r\n    ) \r\n}\r\n\r\nexport default Home","import './TopBar.css';\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icon } from '@fortawesome/fontawesome-svg-core/import.macro'\r\n\r\nfunction TopBar(){\r\n\r\n    return(\r\n        <div className=\"bar\">\r\n            <FontAwesomeIcon className={'icon'} icon={icon({name: 'bars-staggered'})} />\r\n            <FontAwesomeIcon className={'icon'} icon={icon({name: 'circle-question', style: 'regular'})} />\r\n\r\n            <div className='title'>\r\n                <p style={{color: '#6f7172'}}>GAME</p>\r\n                <p style={{color: '#6ebf8b'}}>GRID</p>\r\n            </div>\r\n\r\n            <FontAwesomeIcon className={'icon'} icon={icon({name: 'house'})} />\r\n            <FontAwesomeIcon className={'icon'} icon={icon({name: 'chart-simple'})} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopBar;","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Board from \"../Board/Board\";\r\nimport _ from 'lodash';\r\n\r\n\r\nconst allPuzzles = {\r\n    1: {\r\n        red: ['Mario Series', 'Super Mario Galaxy', 'Super Mario Odyssey', 'Super Mario World', 'Super Mario 64'],\r\n        blue: ['Zelda Series', 'The Legend of Zelda: Breath of the Wild', 'The Legend of Zelda: Tears of the Kingdom', 'The Legend of Zelda: A Link to the Past', 'The Legend of Zelda: A Link Between Worlds'],\r\n        pink: ['Arcade Games', 'Asteroids', 'Ms. Pac-Man', 'Street Fighter II: The World Warrior', 'Frogger'],\r\n        green: ['Blizzard Games', 'Diablo', 'Starcraft', 'Overwatch', 'World of Warcraft'],\r\n        purple: ['\"World\" Titles', 'World of Warcraft', 'Super Mario World', 'Street Fighter II: The World Warrior', 'The Legend of Zelda: A Link Between Worlds'],\r\n    },\r\n    2: {\r\n        red: ['Mario Series', 'Super Mario Galaxy', 'Super Mario Odyssey', 'Super Mario World', 'Super Mario 64'],\r\n        blue: ['Zelda Series', 'The Legend of Zelda: Breath of the Wild', 'The Legend of Zelda: Tears of the Kingdom', 'The Legend of Zelda: A Link to the Past', 'The Legend of Zelda: A Link Between Worlds'],\r\n        pink: ['Arcade Games', 'Asteroids', 'Ms. Pac-Man', 'Street Fighter II: The World Warrior', 'Frogger'],\r\n        green: ['Blizzard Games', 'Diablo', 'Starcraft', 'Overwatch', 'World of Warcraft'],\r\n        purple: ['\"World\" Titles', 'World of Warcraft', 'Super Mario World', 'Street Fighter II: The World Warrior', 'The Legend of Zelda: A Link Between Worlds'],\r\n    },\r\n    3: {\r\n        red: ['Mario Series', 'Super Mario Galaxy', 'Super Mario Odyssey', 'Super Mario World', 'Super Mario 64'],\r\n        blue: ['Zelda Series', 'The Legend of Zelda: Breath of the Wild', 'The Legend of Zelda: Tears of the Kingdom', 'The Legend of Zelda: A Link to the Past', 'The Legend of Zelda: A Link Between Worlds'],\r\n        pink: ['Arcade Games', 'Asteroids', 'Ms. Pac-Man', 'Street Fighter II: The World Warrior', 'Frogger'],\r\n        green: ['Blizzard Games', 'Diablo', 'Starcraft', 'Overwatch', 'World of Warcraft'],\r\n        purple: ['\"World\" Titles', 'World of Warcraft', 'Super Mario World', 'Street Fighter II: The World Warrior', 'The Legend of Zelda: A Link Between Worlds'],\r\n    },\r\n    4: {\r\n        red: ['Mario Series', 'Super Mario Galaxy', 'Super Mario Odyssey', 'Super Mario World', 'Super Mario 64'],\r\n        blue: ['Zelda Series', 'The Legend of Zelda: Breath of the Wild', 'The Legend of Zelda: Tears of the Kingdom', 'The Legend of Zelda: A Link to the Past', 'The Legend of Zelda: A Link Between Worlds'],\r\n        pink: ['Arcade Games', 'Asteroids', 'Ms. Pac-Man', 'Street Fighter II: The World Warrior', 'Frogger'],\r\n        green: ['Blizzard Games', 'Diablo', 'Starcraft', 'Overwatch', 'World of Warcraft'],\r\n        purple: ['\"World\" Titles', 'World of Warcraft', 'Super Mario World', 'Street Fighter II: The World Warrior', 'The Legend of Zelda: A Link Between Worlds'],\r\n    },\r\n    5: {\r\n        red: ['Mario Series', 'Super Mario Galaxy', 'Super Mario Odyssey', 'Super Mario World', 'Super Mario 64'],\r\n        blue: ['Zelda Series', 'The Legend of Zelda: Breath of the Wild', 'The Legend of Zelda: Tears of the Kingdom', 'The Legend of Zelda: A Link to the Past', 'The Legend of Zelda: A Link Between Worlds'],\r\n        pink: ['Arcade Games', 'Asteroids', 'Ms. Pac-Man', 'Street Fighter II: The World Warrior', 'Frogger'],\r\n        green: ['Blizzard Games', 'Diablo', 'Starcraft', 'Overwatch', 'World of Warcraft'],\r\n        purple: ['\"World\" Titles', 'World of Warcraft', 'Super Mario World', 'Street Fighter II: The World Warrior', 'The Legend of Zelda: A Link Between Worlds'],\r\n    },\r\n}\r\n\r\nfunction parseGrid(puzzle){\r\n    let titles = new Set();\r\n    for(let group of Object.values(puzzle)){\r\n        for(let i=1;i<group.length;i++){\r\n            titles.add(group[i])\r\n        }\r\n    }\r\n    titles = Array.from(titles)\r\n    let testGrid = makeGrid(titles);\r\n    while(!check(testGrid,puzzle)) testGrid = makeGrid(titles);\r\n    return testGrid;\r\n}\r\n\r\nfunction makeGrid(titles){\r\n    titles = _.shuffle(titles);\r\n\r\n    const res = new Array(4).fill().map(()=>new Array(4));\r\n    for(let r=0;r<4;r++){\r\n        for(let c=0;c<4;c++){\r\n            res[r][c] = titles[r*4 + c]\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction check(grid,puzzle){\r\n    for(let color of Object.keys(puzzle)){\r\n        // horizontal\r\n        for(let r=0;r<4;r++){\r\n            let count=0;\r\n            for(let c=0;c<4;c++){\r\n                if(puzzle[color].includes(grid[r][c])) count++;\r\n            }\r\n            if(count>2) return false;\r\n        }\r\n        \r\n        // vertical\r\n        for(let c=0;c<4;c++){\r\n            let count=0;\r\n            for(let r=0;r<4;r++){\r\n                if(puzzle[color].includes(grid[r][c])) count++;\r\n            }\r\n            if(count>2) return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction Page(){\r\n    const {puzzleId} = useParams();\r\n    const grid = puzzleId in allPuzzles ? parseGrid(allPuzzles[puzzleId]) : null;\r\n\r\n    return(\r\n        <>\r\n            <p>This is a Puzzle Page #{puzzleId}</p>\r\n            {puzzleId in allPuzzles ? <Board grid={grid} answers={allPuzzles[puzzleId]}/> : `Sorry, that puzzle doesn't exist yet!`}\r\n        </>\r\n    ) \r\n}\r\n\r\nexport default Page","import './App.css';\nimport React from 'react';\nimport {Route, Routes} from 'react-router-dom'\nimport Board from './components/Board/Board';\nimport Home from './components/Home/Home';\nimport TopBar from './components/TopBar/TopBar';\nimport Page from './components/Page/Page';\n\nconst example = {\n  grid: [\n      ['Overwatch','Street Fighter II: The World Warrior','Super Mario Odyssey','The Legend of Zelda: A Link to the Past'],\n      ['Asteroids','The Legend of Zelda: Breath of the Wild','Super Mario Galaxy','World of Warcraft'],\n      ['Super Mario World', 'Diablo', 'Frogger','The Legend of Zelda: Tears of the Kingdom'],\n      ['The Legend of Zelda: A Link Between Worlds','Ms. Pac-Man','Starcraft','Super Mario 64'],\n  ],\n  answers: {\n    red: ['Mario Series', 'Super Mario Galaxy', 'Super Mario Odyssey', 'Super Mario World', 'Super Mario 64'],\n    blue: ['Zelda Series', 'The Legend of Zelda: Breath of the Wild', 'The Legend of Zelda: Tears of the Kingdom', 'The Legend of Zelda: A Link to the Past', 'The Legend of Zelda: A Link Between Worlds'],\n    pink: ['Arcade Games', 'Asteroids', 'Ms. Pac-Man', 'Street Fighter II: The World Warrior', 'Frogger'],\n    green: ['Blizzard Games', 'Diablo', 'Starcraft', 'Overwatch', 'World of Warcraft'],\n    purple: ['\"World\" Titles', 'World of Warcraft', 'Super Mario World', 'Street Fighter II: The World Warrior', 'The Legend of Zelda: A Link Between Worlds'],\n  }\n}\n\n\n\nfunction App() {\n  return (\n    <div className='wrapper'>\n      <div className='side-panel'/>\n\n      <div className=\"App\">\n        <TopBar />\n        <Routes>\n          <Route path='/puzzles/:puzzleId' element={<Page/>} />\n          <Route exact path='/' element={<Home/>} />\n        </Routes>\n        {/* <Board puzzle={example}/> */}\n      </div>\n\n      <div className='side-panel'/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom/dist';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}